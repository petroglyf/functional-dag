# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Ubuntu Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest]
        build_type: [Release]
        c_compiler: [gcc, cl, aarch64-linux-gnu-gcc]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            is_arm: false
          - os: ubuntu-latest
            c_compiler: aarch64-linux-gnu-gcc
            cpp_compiler: aarch64-linux-gnu-g++
            is_arm: true
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v3

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install dependencies if ARM64
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: deps-arm
      shell: bash
      run: |
        ! ${{ matrix.is_arm }} && echo "Is x86, skipping" && exit;
        sudo dpkg --add-architecture arm64
        
        sudo echo "deb [arch=arm64] http://ports.ubuntu.com/ jammy main restricted" >> source-mod.list
        sudo echo "deb [arch=arm64] http://ports.ubuntu.com/ jammy-updates main restricted" >> source-mod.list
        sudo echo "deb [arch=arm64] http://ports.ubuntu.com/ jammy universe" >> source-mod.list
        sudo echo "deb [arch=arm64] http://ports.ubuntu.com/ jammy-updates universe" >> source-mod.list
        sudo echo "deb [arch=arm64] http://ports.ubuntu.com/ jammy multiverse" >> source-mod.list
        sudo echo "deb [arch=arm64] http://ports.ubuntu.com/ jammy-updates multiverse" >> source-mod.list
        sudo echo "deb [arch=arm64] http://ports.ubuntu.com/ jammy-backports main restricted universe multiverse" >> source-mod.list
        sudo mv source-mod.list /etc/apt/sources.list.d/arm-cross-compile-sources.list

        sudo sed -i 's/deb /deb [arch=amd64] /g' /etc/apt/sources.list
        
        sudo apt update
        sudo apt-get install -y pkg-config catch2 libjsoncpp-dev:arm64 
        sudo apt-get install -y gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu g++-aarch64-linux-gnu
    - name: Install dependencies if x86-64
      run: |
        ${{ matrix.is_arm }} && echo "Is ARM, skipping" && exit; 
        sudo apt-get install -y pkg-config catch2 libjsoncpp-dev
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        export PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig
        ${{ matrix.is_arm }} && cmake -B ${{ steps.strings.outputs.build-output-dir }} -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DARCHITECTURE_ID='arm64' -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -S ${{ github.workspace }};
        ! ${{ matrix.is_arm }} && cmake -B ${{ steps.strings.outputs.build-output-dir }} -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DARCHITECTURE_ID='amd64' -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -S ${{ github.workspace }};
        echo "Completed Configuration"

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Package result 
      id: pack
      shell: bash
      run: |
        cd build && cpack -G DEB
        # ${{ matrix.is_arm }} && mv package/ package_arm64/;
        # ! ${{ matrix.is_arm }} && mv package/ package_amd64/; 
        echo "Complete"

    - uses: actions/upload-artifact@v4
      with:
        # Name of the artifact to upload.
        # Optional. Default is 'artifact'
        name: Store artifacts 
        id: artifact
    
        # A file, directory or wildcard pattern that describes what to upload
        # Required.
        path: 'build/package/*.deb'
    
        # The desired behavior if no files are found using the provided path.
        # Available Options:
        #   warn: Output a warning but do not fail the action
        #   error: Fail the action with an error message
        #   ignore: Do not output any warnings or errors, the action does not fail
        # Optional. Default is 'warn'
        if-no-files-found: warn
    
    
        # If true, an artifact with a matching name will be deleted before a new one is uploaded.
        # If false, the action will fail if an artifact for the given name already exists.
        # Does not fail if the artifact does not exist.
        # Optional. Default is 'false'
        overwrite: true
